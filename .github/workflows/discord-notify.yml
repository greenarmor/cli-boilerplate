name: Notify Discord

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    types: [closed]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Discord payload vars
        id: prep
        shell: bash
        run: |
          EVENT="${{ github.event_name }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          AVATAR="https://github.com/${ACTOR}.png"

          # Defaults
          TITLE="Repository update on ${REPO}"
          URL="${{ github.server_url }}/${REPO}"
          COLOR=5814783
          DESCRIPTION=""
          CONTENT=""

          if [ "$EVENT" = "push" ]; then
            REF="${{ github.ref_name }}"
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            COMPARE_URL="${{ github.server_url }}/${REPO}/compare/${BEFORE}...${AFTER}"

            # Build up to 5 commit lines: - [`abcd123`](url) message
            COMMITS_JSON='${{ toJson(github.event.commits) }}'
            COMMITS_MD=$(jq -r '
              (.[0:5] // []) |
              map("- [`\(.id[0:7])`](\(.url)) \(.message | gsub("\r?\n$";""))") |
              join("\n")
            ' <<< "$COMMITS_JSON")

            COUNT=$(jq 'length' <<< "$COMMITS_JSON")
            TITLE="Push to ${REF}"
            URL="$COMPARE_URL"
            DESCRIPTION="**${COUNT}** commit(s) pushed by **${ACTOR}**\n\n${COMMITS_MD}"
            COLOR=3066993
            CONTENT=""

          elif [ "$EVENT" = "pull_request" ]; then
            MERGED=$(jq -r '.pull_request.merged' <<< '${{ toJson(github.event) }}')
            if [ "$MERGED" = "true" ]; then
              PR=$(jq -r '.pull_request.number' <<< '${{ toJson(github.event) }}')
              PR_TITLE=$(jq -r '.pull_request.title' <<< '${{ toJson(github.event) }}')
              BASE=$(jq -r '.pull_request.base.ref' <<< '${{ toJson(github.event) }}')
              URL=$(jq -r '.pull_request.html_url' <<< '${{ toJson(github.event) }}')
              TITLE="PR merged into ${BASE}"
              DESCRIPTION="**#${PR} â€“ ${PR_TITLE}**\nMerged by **${ACTOR}**"
              COLOR=3447003
              CONTENT=""
            else
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi

          elif [ "$EVENT" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
            NAME="${{ github.event.release.name || github.event.release.tag_name }}"
            BODY=$(jq -r '.release.body // ""' <<< '${{ toJson(github.event) }}')
            URL="${{ github.event.release.html_url }}"
            TITLE="Release published: ${NAME}"
            DESCRIPTION="Tag: **${TAG}**\n\n${BODY}"
            COLOR=15844367
            CONTENT=""
          fi

          # Output for next step (jq will do escaping)
          {
            echo "title<<EOF"
            echo "$TITLE"
            echo "EOF"
            echo "description<<EOF"
            echo "$DESCRIPTION"
            echo "EOF"
            echo "url=$URL"
            echo "color=$COLOR"
            echo "avatar=$AVATAR"
            echo "actor=$ACTOR"
            echo "content<<EOF"
            echo "$CONTENT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send to Discord
        if: steps.prep.outputs.skip != 'true'
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          TITLE: ${{ steps.prep.outputs.title }}
          DESCRIPTION: ${{ steps.prep.outputs.description }}
          URL: ${{ steps.prep.outputs.url }}
          COLOR: ${{ steps.prep.outputs.color }}
          AVATAR: ${{ steps.prep.outputs.avatar }}
          ACTOR: ${{ steps.prep.outputs.actor }}
          CONTENT: ${{ steps.prep.outputs.content }}
          REPO: ${{ github.repository }}
          TS: ${{ github.event.head_commit.timestamp || github.event.release.published_at || github.event.pull_request.merged_at || github.event.pull_request.updated_at || github.event.repository.pushed_at }}
        run: |
          jq -n \
            --arg content "$CONTENT" \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg url "$URL" \
            --arg actor "$ACTOR" \
            --arg avatar "$AVATAR" \
            --arg repo "$REPO" \
            --arg ts "$TS" \
            --argjson color "$COLOR" \
            '{
              "content": ($content | select(length>0)),
              "embeds": [{
                "title": $title,
                "description": $description,
                "url": $url,
                "color": $color,
                "author": { "name": $actor, "icon_url": $avatar },
                "footer": { "text": $repo },
                "timestamp": $ts
              }]
            }' > payload.json

          curl -sS -X POST -H "Content-Type: application/json" \
            -d @payload.json "$WEBHOOK" \
            || (echo "::error::Failed to post to Discord" && exit 1)
