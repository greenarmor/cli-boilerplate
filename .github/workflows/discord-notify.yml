name: Notify Discord (main pushes)

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      # ✅ Step 1 — PREP VARS (robust defaults so Discord never sees an empty message)
      - name: Prepare Discord payload vars
        id: prep
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          AVATAR="https://github.com/${ACTOR}.png"

          # Push-only context
          REF="${{ github.ref_name }}"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          COMPARE_URL="${{ github.server_url }}/${REPO}/compare/${BEFORE}...${AFTER}"

          COMMITS_JSON='${{ toJson(github.event.commits) }}'
          COUNT=$(jq 'length' <<< "$COMMITS_JSON")
          COMMITS_MD=$(jq -r '
            (.[0:10] // []) |
            map("- [`\(.id[0:7])`](\(.url)) \(.message | gsub("\r?\n$";""))") |
            join("\n")
          ' <<< "$COMMITS_JSON")

          # Non-empty fallbacks
          TITLE="Push to ${REF}"
          URL="$COMPARE_URL"
          DESCRIPTION="**${COUNT}** commit(s) pushed by **${ACTOR}**\n\n${COMMITS_MD}"
          CONTENT="Push to ${REF} by ${ACTOR}"
          COLOR=3066993
          TS="${{ github.event.head_commit.timestamp || github.event.repository.pushed_at || github.run_started_at }}"

          # When GitHub can’t supply commits (edge/manual cases), still send something
          if [ -z "$COMMITS_MD" ] || [ "$COMMITS_MD" = "null" ]; then
            DESCRIPTION="Update on **${REPO}** by **${ACTOR}**"
          fi

          {
            echo "title<<EOF";        echo "$TITLE";        echo "EOF"
            echo "description<<EOF";  echo "$DESCRIPTION";  echo "EOF"
            echo "url=$URL"
            echo "color=$COLOR"
            echo "avatar=$AVATAR"
            echo "actor=$ACTOR"
            echo "content<<EOF";      echo "$CONTENT";      echo "EOF"
            echo "timestamp=$TS"
            echo "repo=$REPO"
          } >> "$GITHUB_OUTPUT"

      # ✅ Step 2 — SEND TO DISCORD
      - name: Send to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          TITLE: ${{ steps.prep.outputs.title }}
          DESCRIPTION: ${{ steps.prep.outputs.description }}
          URL: ${{ steps.prep.outputs.url }}
          COLOR: ${{ steps.prep.outputs.color }}
          AVATAR: ${{ steps.prep.outputs.avatar }}
          ACTOR: ${{ steps.prep.outputs.actor }}
          CONTENT: ${{ steps.prep.outputs.content }}
          REPO: ${{ steps.prep.outputs.repo }}
          TS: ${{ steps.prep.outputs.timestamp }}
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "::error::Missing secret DISCORD_WEBHOOK"; exit 1;
          fi

          jq -n \
            --arg content "$CONTENT" \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg url "$URL" \
            --arg actor "$ACTOR" \
            --arg avatar "$AVATAR" \
            --arg repo "$REPO" \
            --arg ts "$TS" \
            --argjson color "$COLOR" \
            '{
              "content": $content,                      # guaranteed non-empty
              "embeds": [{
                "title": $title,
                "description": $description,
                "url": $url,
                "color": $color,
                "author": { "name": $actor, "icon_url": $avatar },
                "footer": { "text": $repo },
                "timestamp": $ts
              }],
              "allowed_mentions": { "parse": [] }
            }' > payload.json

          # Optional: show payload (safe; no secrets)
          echo "--- Discord payload ---"; cat payload.json; echo "---------------------"

          curl -sS -X POST -H "Content-Type: application/json" \
            -d @payload.json "$WEBHOOK" \
            || (echo "::error::Failed to post to Discord" && exit 1)
